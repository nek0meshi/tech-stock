// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: article_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "article_info";

export interface GetArticleInfoRequest {
  url: string;
}

export interface GetArticleInfoResponse {
  title: string;
  description: string;
  imageUrl: string;
}

function createBaseGetArticleInfoRequest(): GetArticleInfoRequest {
  return { url: "" };
}

export const GetArticleInfoRequest: MessageFns<GetArticleInfoRequest> = {
  encode(message: GetArticleInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleInfoRequest {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: GetArticleInfoRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleInfoRequest>, I>>(base?: I): GetArticleInfoRequest {
    return GetArticleInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleInfoRequest>, I>>(object: I): GetArticleInfoRequest {
    const message = createBaseGetArticleInfoRequest();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseGetArticleInfoResponse(): GetArticleInfoResponse {
  return { title: "", description: "", imageUrl: "" };
}

export const GetArticleInfoResponse: MessageFns<GetArticleInfoResponse> = {
  encode(message: GetArticleInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.imageUrl !== "") {
      writer.uint32(26).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleInfoResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
    };
  },

  toJSON(message: GetArticleInfoResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleInfoResponse>, I>>(base?: I): GetArticleInfoResponse {
    return GetArticleInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleInfoResponse>, I>>(object: I): GetArticleInfoResponse {
    const message = createBaseGetArticleInfoResponse();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

export type ArticleInfoServiceService = typeof ArticleInfoServiceService;
export const ArticleInfoServiceService = {
  getArticleInfo: {
    path: "/article_info.ArticleInfoService/GetArticleInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetArticleInfoRequest): Buffer =>
      Buffer.from(GetArticleInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetArticleInfoRequest => GetArticleInfoRequest.decode(value),
    responseSerialize: (value: GetArticleInfoResponse): Buffer =>
      Buffer.from(GetArticleInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetArticleInfoResponse => GetArticleInfoResponse.decode(value),
  },
} as const;

export interface ArticleInfoServiceServer extends UntypedServiceImplementation {
  getArticleInfo: handleUnaryCall<GetArticleInfoRequest, GetArticleInfoResponse>;
}

export interface ArticleInfoServiceClient extends Client {
  getArticleInfo(
    request: GetArticleInfoRequest,
    callback: (error: ServiceError | null, response: GetArticleInfoResponse) => void,
  ): ClientUnaryCall;
  getArticleInfo(
    request: GetArticleInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetArticleInfoResponse) => void,
  ): ClientUnaryCall;
  getArticleInfo(
    request: GetArticleInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetArticleInfoResponse) => void,
  ): ClientUnaryCall;
}

export const ArticleInfoServiceClient = makeGenericClientConstructor(
  ArticleInfoServiceService,
  "article_info.ArticleInfoService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ArticleInfoServiceClient;
  service: typeof ArticleInfoServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
