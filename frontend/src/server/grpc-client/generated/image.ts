// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "image";

export interface SaveImageOfUrlRequest {
  url: string;
}

export interface SaveImageOfUrlResponse {
  objectKey: string;
}

export interface GetImageUrlRequest {
  objectKey: string;
}

export interface GetImageUrlResponse {
  presignedUrl: string;
}

function createBaseSaveImageOfUrlRequest(): SaveImageOfUrlRequest {
  return { url: "" };
}

export const SaveImageOfUrlRequest: MessageFns<SaveImageOfUrlRequest> = {
  encode(message: SaveImageOfUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveImageOfUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveImageOfUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveImageOfUrlRequest {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: SaveImageOfUrlRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveImageOfUrlRequest>, I>>(base?: I): SaveImageOfUrlRequest {
    return SaveImageOfUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveImageOfUrlRequest>, I>>(object: I): SaveImageOfUrlRequest {
    const message = createBaseSaveImageOfUrlRequest();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseSaveImageOfUrlResponse(): SaveImageOfUrlResponse {
  return { objectKey: "" };
}

export const SaveImageOfUrlResponse: MessageFns<SaveImageOfUrlResponse> = {
  encode(message: SaveImageOfUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.objectKey !== "") {
      writer.uint32(10).string(message.objectKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveImageOfUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveImageOfUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.objectKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveImageOfUrlResponse {
    return { objectKey: isSet(object.objectKey) ? globalThis.String(object.objectKey) : "" };
  },

  toJSON(message: SaveImageOfUrlResponse): unknown {
    const obj: any = {};
    if (message.objectKey !== "") {
      obj.objectKey = message.objectKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveImageOfUrlResponse>, I>>(base?: I): SaveImageOfUrlResponse {
    return SaveImageOfUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveImageOfUrlResponse>, I>>(object: I): SaveImageOfUrlResponse {
    const message = createBaseSaveImageOfUrlResponse();
    message.objectKey = object.objectKey ?? "";
    return message;
  },
};

function createBaseGetImageUrlRequest(): GetImageUrlRequest {
  return { objectKey: "" };
}

export const GetImageUrlRequest: MessageFns<GetImageUrlRequest> = {
  encode(message: GetImageUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.objectKey !== "") {
      writer.uint32(10).string(message.objectKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetImageUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetImageUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.objectKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetImageUrlRequest {
    return { objectKey: isSet(object.objectKey) ? globalThis.String(object.objectKey) : "" };
  },

  toJSON(message: GetImageUrlRequest): unknown {
    const obj: any = {};
    if (message.objectKey !== "") {
      obj.objectKey = message.objectKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetImageUrlRequest>, I>>(base?: I): GetImageUrlRequest {
    return GetImageUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetImageUrlRequest>, I>>(object: I): GetImageUrlRequest {
    const message = createBaseGetImageUrlRequest();
    message.objectKey = object.objectKey ?? "";
    return message;
  },
};

function createBaseGetImageUrlResponse(): GetImageUrlResponse {
  return { presignedUrl: "" };
}

export const GetImageUrlResponse: MessageFns<GetImageUrlResponse> = {
  encode(message: GetImageUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.presignedUrl !== "") {
      writer.uint32(10).string(message.presignedUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetImageUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetImageUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.presignedUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetImageUrlResponse {
    return { presignedUrl: isSet(object.presignedUrl) ? globalThis.String(object.presignedUrl) : "" };
  },

  toJSON(message: GetImageUrlResponse): unknown {
    const obj: any = {};
    if (message.presignedUrl !== "") {
      obj.presignedUrl = message.presignedUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetImageUrlResponse>, I>>(base?: I): GetImageUrlResponse {
    return GetImageUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetImageUrlResponse>, I>>(object: I): GetImageUrlResponse {
    const message = createBaseGetImageUrlResponse();
    message.presignedUrl = object.presignedUrl ?? "";
    return message;
  },
};

export type ImageServiceService = typeof ImageServiceService;
export const ImageServiceService = {
  saveImageOfUrl: {
    path: "/image.ImageService/SaveImageOfUrl",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SaveImageOfUrlRequest): Buffer =>
      Buffer.from(SaveImageOfUrlRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SaveImageOfUrlRequest => SaveImageOfUrlRequest.decode(value),
    responseSerialize: (value: SaveImageOfUrlResponse): Buffer =>
      Buffer.from(SaveImageOfUrlResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SaveImageOfUrlResponse => SaveImageOfUrlResponse.decode(value),
  },
  getImageUrl: {
    path: "/image.ImageService/GetImageUrl",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetImageUrlRequest): Buffer => Buffer.from(GetImageUrlRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetImageUrlRequest => GetImageUrlRequest.decode(value),
    responseSerialize: (value: GetImageUrlResponse): Buffer => Buffer.from(GetImageUrlResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetImageUrlResponse => GetImageUrlResponse.decode(value),
  },
} as const;

export interface ImageServiceServer extends UntypedServiceImplementation {
  saveImageOfUrl: handleUnaryCall<SaveImageOfUrlRequest, SaveImageOfUrlResponse>;
  getImageUrl: handleUnaryCall<GetImageUrlRequest, GetImageUrlResponse>;
}

export interface ImageServiceClient extends Client {
  saveImageOfUrl(
    request: SaveImageOfUrlRequest,
    callback: (error: ServiceError | null, response: SaveImageOfUrlResponse) => void,
  ): ClientUnaryCall;
  saveImageOfUrl(
    request: SaveImageOfUrlRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SaveImageOfUrlResponse) => void,
  ): ClientUnaryCall;
  saveImageOfUrl(
    request: SaveImageOfUrlRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SaveImageOfUrlResponse) => void,
  ): ClientUnaryCall;
  getImageUrl(
    request: GetImageUrlRequest,
    callback: (error: ServiceError | null, response: GetImageUrlResponse) => void,
  ): ClientUnaryCall;
  getImageUrl(
    request: GetImageUrlRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetImageUrlResponse) => void,
  ): ClientUnaryCall;
  getImageUrl(
    request: GetImageUrlRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetImageUrlResponse) => void,
  ): ClientUnaryCall;
}

export const ImageServiceClient = makeGenericClientConstructor(
  ImageServiceService,
  "image.ImageService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ImageServiceClient;
  service: typeof ImageServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
